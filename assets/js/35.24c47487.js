(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{385:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("对象字面量语法扩展")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#语法扩展"}},[t._v("语法扩展")])]),a("li",[a("a",{attrs:{href:"#增强对象原型"}},[t._v("增强对象原型")])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"语法扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法扩展"}},[t._v("#")]),t._v(" 语法扩展")]),t._v(" "),a("h5",{attrs:{id:"简写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简写"}},[t._v("#")]),t._v(" 简写")]),t._v(" "),a("h5",{attrs:{id:"可计算属性名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可计算属性名"}},[t._v("#")]),t._v(" 可计算属性名")]),t._v(" "),a("p",[t._v("在对象字面量中，可以直接使用字符串字面量作为属性名称。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first name"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"last name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zakas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),t._v("\n")])])]),a("p",[t._v("在对象字面量中使用方括号表示的该属性名称是可计算的，它的内容将被求值并被最终转化为一个字符串，因而同样可以使用表达式作为属性的可计算名称。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" suffix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" suffix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"last"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" suffix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Zakas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("suffix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"新增方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增方法"}},[t._v("#")]),t._v(" 新增方法")]),t._v(" "),a("ul",[a("li",[t._v("Object.is() 此方法接受两个参数，如果这两个参数类型相同且具有相同的值，则返回true。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("对于Object.is()方法来说，运行结果在大部分情况下与===运算符相同，唯一区别在+0 和 -0被识别为不相等并且NaNh和NaN等价。")]),t._v(" "),a("ul",[a("li",[t._v("Object.assign() 接受一个对象和任意数量的源对象，最终返回接受对象。注意是通过赋值操作符，因此是浅拷贝，且不能赋值访问器属性到接受对象中，由于此方法执行了赋值操作，因此提供者的访问器属性最终会转变为接受对象中的一个数据属性。")])]),t._v(" "),a("h5",{attrs:{id:"重复的对象字面量属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复的对象字面量属性"}},[t._v("#")]),t._v(" 重复的对象字面量属性")]),t._v(" "),a("p",[t._v("在es6中，移除了在es5严格模式下重复属性名检查的机制，对于每一组重复属性，都会选取最后一个取值。")]),t._v(" "),a("h5",{attrs:{id:"自由属性枚举顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自由属性枚举顺序"}},[t._v("#")]),t._v(" 自由属性枚举顺序")]),t._v(" "),a("p",[t._v("自有属性枚举顺序的基本规则是：")]),t._v(" "),a("ol",[a("li",[t._v("所有数字键按升序排序。")]),t._v(" "),a("li",[t._v("所有字符串键按照它们被加入对象的顺序排序。")]),t._v(" "),a("li",[t._v("所有symbol键按照被加入对象的顺序排序。\n这回影响到Object.getOwnPropertyNames()以及Reflect.ownKeys返回属性的方式，Object,assgin()处理属性的顺序也会改变。\nfor-in Object.keys() JSON.stringify()使用相同的枚举顺序，但并非所有厂商遵循相同的实现方式，因此仍未指定。")])]),t._v(" "),a("h3",{attrs:{id:"增强对象原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增强对象原型"}},[t._v("#")]),t._v(" 增强对象原型")]),t._v(" "),a("h5",{attrs:{id:"改变对象的原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变对象的原型"}},[t._v("#")]),t._v(" 改变对象的原型")]),t._v(" "),a("p",[t._v("增加Object.setPrototypeOf()通过这一方法可以改变任意指定的对象的原型，接受两个参数，被改变原型的对象及替代第一个参数原型的对象。\n对象原型的真实值被存储在内部专用属性[[Prototype]]中，调用Object.getPrototypeOf()方法返回储存在其中的值，调用Object.setPrototypeOf()方法改变其中的值。注意，这不是操作[[Prototype]]值的唯一方法。")]),t._v(" "),a("h5",{attrs:{id:"简化原型访问的super引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简化原型访问的super引用"}},[t._v("#")]),t._v(" 简化原型访问的Super引用")]),t._v(" "),a("p",[t._v("super引用相当于指向对象原型的指针，实际上也就是Object.getPrototypeOf(this)的值。但是注意必须要在使用简写方法的对象中使用Super引用，如果在其他方法中使用会导致语法错误。\nSuper引用不是动态变化的，它总数指向正确的对象。\n总结:super无法在对象字面量的匿名函数中使用，只能在简写中使用，且值是不会动态变化，如果使用this，this的值会随着上下文改变从而引发一些不易发现的错误。")]),t._v(" "),a("h5",{attrs:{id:"正式方法的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正式方法的定义"}},[t._v("#")]),t._v(" 正式方法的定义")]),t._v(" "),a("p",[t._v("在es6中正式将方法定义为一个函数，它会有一个内部的[[HomeObject]]属性来容纳这个方法从属的对象。\nSuper的所有引用都通过[[HomeObject]]属性来确定后续的运行过程，第一步是在[[HomeObject]]属性上调用Object.getPrototypeOf 方法来检索原型的引用；然后搜寻原型找到同名函数，最后，设置this绑定并且调用相应的方法。\n(可用super关键字调用对象原型上的方法，此时的this绑定会被自动设置为当前作用域的this值。super引用不是动态变化,而是始终指向正确对象,不发生改变)")])])}),[],!1,null,null,null);s.default=r.exports}}]);